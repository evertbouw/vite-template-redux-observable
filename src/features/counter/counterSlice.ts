import { createAction, createSlice, PayloadAction } from "@reduxjs/toolkit"
import { AppThunk } from "../../app/store"
import { fetchCount } from "./counterAPI"
import { Epic } from "redux-observable"
import { catchError, filter, map, mergeMap, of, startWith } from "rxjs"

export interface CounterState {
  value: number
  status: "idle" | "loading" | "failed"
}

const initialState: CounterState = {
  value: 0,
  status: "idle",
}

export const incrementAsync = createAction<number>("counter/incrementAsync")
export const incrementAsyncPending = createAction("counter/incrementAsyncPending")
export const incrementAsyncFulfilled = createAction<number>("counter/incrementAsyncFulfilled")
export const incrementAsyncRejected = createAction<string>("counter/incrementAsyncRejected")

// The function below is called an epic and allows us to map an observable of actions to a new observable of actions.
export const incrementAsyncEpic: Epic = (action$) =>
  action$.pipe(
    // all epics receive all actions, but we're only interested in incrementAsync.
    filter(incrementAsync.match),
    // map this action to a new stream
    mergeMap((action) =>
      // call fetchCount and turn the promise into an observable
      fetchCount(action.payload).pipe(
        // map the response to a new action
        map((count) => incrementAsyncFulfilled(count)),
        // emit this action first
        startWith(incrementAsyncPending()),
        // continue with this observable in case of an error
        catchError((error) => of(incrementAsyncRejected(error.message))),
      ),
    ),
  )

export const counterSlice = createSlice({
  name: "counter",
  initialState,
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    increment: (state) => {
      // Redux Toolkit allows us to write "mutating" logic in reducers. It
      // doesn't actually mutate the state because it uses the Immer library,
      // which detects changes to a "draft state" and produces a brand new
      // immutable state based off those changes
      state.value += 1
    },
    decrement: (state) => {
      state.value -= 1
    },
    // Use the PayloadAction type to declare the contents of `action.payload`
    incrementByAmount: (state, action: PayloadAction<number>) => {
      state.value += action.payload
    },
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
  extraReducers: (builder) => {
    builder
      .addCase(incrementAsyncPending, (state) => {
        state.status = "loading"
      })
      .addCase(incrementAsyncFulfilled, (state, action) => {
        state.status = "idle"
        state.value += action.payload
      })
      .addCase(incrementAsyncRejected, (state) => {
        state.status = "failed"
      })
    },
    // The function below is called a selector and allows us to select a value from
    // the state. Selectors can also be defined inline where they're used instead of
    // in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
  selectors: {
    selectCount: (state) => state.value,
  },
})

// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.
export const incrementIfOdd =
  (amount: number): AppThunk =>
  (dispatch, getState) => {
    const currentValue = counterSlice.selectors.selectCount(getState())
    if (currentValue % 2 === 1) {
      dispatch(counterSlice.actions.incrementByAmount(amount))
    }
  }
